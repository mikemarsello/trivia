{"version":3,"sources":["logo.svg","Trivia.js","index.js"],"names":["module","exports","__webpack_require__","p","TriviaApp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","questions","isLoading","numCorrect","numIncorrect","questionNum","gameover","clickHandle","bind","assertThisInitialized","_this2","setState","fetch","then","response","json","data","results","map","question","concat","answer","correct_answer","wrong_answers","incorrect_answers","catch","error","console","log","message","react_default","a","createElement","className","src","logo","alt","es","columns","stackable","container","Trivia_TriviaCard","Trivia_Tally","numWrong","Component","TriviaCard","_this3","num","optionList","split","push","i","length","j","Math","floor","random","temp","renderHTML","rawHTML","React","dangerouslySetInnerHTML","__html","Column","fluid","color","header","onClick","handleClick","Tally","correct","wrong","percent","round","isNaN","ReactDOM","render","Trivia","document","getElementById"],"mappings":"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","file":"static/js/main.0bf04580.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './trivia.css';\nimport { Card, Grid, Segment } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nclass TriviaApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: [],\n      isLoading: null,\n      numCorrect: 0,\n      numIncorrect: 0,\n      questionNum: 1,\n      gameover: false\n    };\n    this.clickHandle = this.clickHandle.bind(this);\n  }\n\n  componentDidMount() {\n    const renderHTML = (rawHTML) => React.createElement(\"span\", { dangerouslySetInnerHTML: { __html: rawHTML } });\n\n    this.setState({\n      isLoading: true\n    })\n    fetch('https://opentdb.com/api.php?amount=26&difficulty=easy&type=multiple')\n    .then(response => response.json())\n    .then(data => data.results.map(question => (\n      {\n        question: `${question.question}`,\n        answer: `${question.correct_answer}`,\n        wrong_answers: `${question.incorrect_answers}`\n      }\n    )))\n    .then(questions => this.setState({\n      questions: questions,\n      isLoading: false,\n    }))\n    .catch(error => console.log('failed API call', error))\n  }\n  \n  clickHandle(response) {\n    if (response !== 'correct') {\n      this.setState({\n        numIncorrect: this.state.numIncorrect + 1,\n        questionNum: this.state.questionNum + 1\n      });\n    }\n    else {\n      this.setState({\n        numCorrect: this.state.numCorrect + 1,\n        questionNum: this.state.questionNum + 1\n      });\n    }\n    if (this.state.questionNum === 25) {\n      this.setState({\n        gameover: true\n      })\n    }\n  }\n\n  render() {\n    let message = (this.state.gameover === false) ? <h3>See how well you do answering these 25 questions</h3> : <h3>Here are your results</h3>;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Pub Trivia</h1>\n        </header>\n        {message}\n        <Grid columns={(this.state.gameover === false) ? 2 : 1} stackable container>\n          <TriviaCard questionNum={this.state.questionNum} isLoading={this.state.isLoading} state={this.state} clickHandle={this.clickHandle}/>\n          <Tally numCorrect={this.state.numCorrect} numWrong={this.state.numIncorrect}/>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nclass TriviaCard extends React.Component {\n\n  handleClick(response) {\n      let answer = this.props.state.questions[this.props.questionNum].answer;\n      if (response === answer) {\n        this.props.clickHandle('correct');\n      }\n      else {\n        this.props.clickHandle('incorrect');\n      }\n  }\n\n  render(){\n    if (this.props.isLoading === false && this.props.questionNum < 26) {\n      let data = this.props.state;\n      let num = this.props.questionNum;\n      let question = data.questions[num].question;\n      let answer = data.questions[num].answer;\n      let wrong_answers = data.questions[num].wrong_answers;\n      let optionList = wrong_answers.split(',');\n      optionList.push(answer);\n\n      // shuffle array\n      for (var i = optionList.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = optionList[i];\n        optionList[i] = optionList[j];\n        optionList[j] = temp;\n      }\n\n      // decode html entities\n      const renderHTML = (rawHTML) => React.createElement(\"span\", { dangerouslySetInnerHTML: { __html: rawHTML } });\n\n      return (\n        <Grid.Column>\n          <Segment>\n            <Card fluid color='blue' header={'Question ' + num} />\n            <p><strong>Question: </strong>{renderHTML(question)}</p>\n            <button className=\"ui button\" onClick={() => this.handleClick(optionList[0])}>{renderHTML(optionList[0])}</button>\n            <button className=\"ui button\" onClick={() => this.handleClick(optionList[1])}>{renderHTML(optionList[1])}</button>\n            <button className=\"ui button\" onClick={() => this.handleClick(optionList[2])}>{renderHTML(optionList[2])}</button>\n            <button className=\"ui button\" onClick={() => this.handleClick(optionList[3])}>{renderHTML(optionList[3])}</button>\n          </Segment>\n        </Grid.Column>\n      );\n    }\n    else {\n      return null;\n    }\n  }\n}\n\nclass Tally extends React.Component {\n  render() {\n    let correct = this.props.numCorrect;\n    let wrong = this.props.numWrong;\n    let percent = Math.round((correct / (correct + wrong)) * 100);\n    return (\n      <Grid.Column>\n        <Segment><Card fluid color='blue' header='Results' />\n          <p><strong>Number Correct: </strong>{correct}</p>\n          <p><strong>Number Wrong: </strong>{wrong}</p>\n          <p><strong>Percentage Correct: </strong>{(isNaN(percent)) ? '' : percent + '%'}</p>\n        </Segment>\n      </Grid.Column>\n    );\n  }\n}\n\nexport default TriviaApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TriviaApp from './Trivia';\n\nReactDOM.render(<TriviaApp />, document.getElementById('root'));\n"],"sourceRoot":""}